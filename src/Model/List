/*
 * List
 *
 *  Created on: Feb 21, 2017
 *      Author: nwhi5696
 */

#ifndef MODEL_LIST_
#define MODEL_LIST_
#include <assert.h>
#include "Node.hpp"
#include <iostream>

namespace std

{
	template <class Type>

	class List
	{
	private:
		int size;
		Node<Type> * front;
		Node<Type>* end;

	public:
		//constructors
		List<Type>();
		List<Type>(int size);

		//destructor
		~List<Type>();

		//copy constructor
		List<Type>(const List<Type> & source);

		//methods
		void addAtIndex(int index, Type value);
		void add(Type value);
		void addFront(Type value);
		Type remove(int index);
		Type setAtIndex(int index, Type data);
		bool contains(Type data);
		int getSize();
		Node<Type>* getFront();
		Node<Type>* getEnd();

	};

	//Implementation Section
	template <class Type>
	List<Type> :: List()
	{
		this->size = 0;
		this->front = nullptr;
		this->end = nullptr;
	}

	template <class Type>
	void List<Type> :: addFront(Type value)
	{
		if(size == 0)
		{
			Node<Type> * first = new Node(value);
			this->front = first;
			this->end = first;
		}
		else
		{
			Node<Type> * newFirst = new Node<Type>();
			newFirst->setNodeData(value);
			newFirst->setNodePointer(front);
			//or
			Node<Type> * newFirst = new Node<Type>(value, front);
		}
		size ++;
	}

}




#endif /* MODEL_LIST_ */
