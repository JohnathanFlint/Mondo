<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>392</x>
      <y>448</y>
      <w>112</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>SimpleClass
--
Data Members
--
Methods
Constructors</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>770</x>
      <y>441</y>
      <w>217</w>
      <h>133</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime : clock_t

--
+ startTimer (): void
+ StopTimer() : void
+ resetTimer() : void
+ displayTimerInfo() : void
+ getExecutionTimeInMicroseconds(): long
+Timer() : construcctor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>609</x>
      <y>1050</y>
      <w>259</w>
      <h>161</h>
    </coordinates>
    <panel_attributes>IntNode
--
-nodeData : int
-nodePointer : IntNode *
--
+getNodeData() : int
+getNodePointer() : IntNode *
+setNodeData(int) : void
+setNodePointer(IntNodePointer *) : void

+IntNode() : constructor
+IntNode(int : constructor
+IntNode(int, IntNode *) : constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>371</x>
      <y>1288</y>
      <w>238</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>
IntNodeArray
--
- head : IntNode* 
- size : int
--
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int index, int value) : void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>875</x>
      <y>910</y>
      <w>308</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
-nodeData : Type
-nodePointer : Node&gt;Type&gt;
--
Constructors
+Node&lt;Type&gt;() : constructor
+Node&lt;Type&gt;(Type value) : constructor
+Node&lt;Type&gt; (Type value, Node&lt;Type&gt; * next) : constructor

Accessors
+getNodeData() : Type
+getNodePointer() : Node&lt;Type&gt;()
+setNodeData(Type value) : void
+setNodePointer(Node&lt;Type&gt; * next) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>917</x>
      <y>1141</y>
      <w>343</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt;*
- Size : int
--
+ Array() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() const : int
+ getFront() const : Nose&lt;Type&gt;

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>945</x>
      <y>1078</y>
      <w>63</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>70.0;90.0;70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1239</x>
      <y>889</y>
      <w>273</w>
      <h>217</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Nodde&lt;Type&gt; *
- end : Noce&lt;Type&gt;*
--
+ List&lt;Type&gt;(*) : cnstructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt;*
+ getEnd() const : Node&lt;Type&gt;*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1176</x>
      <y>1078</y>
      <w>77</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>90.0;40.0;30.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>896</x>
      <y>679</y>
      <w>595</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>Model :: BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- nextPointer : BiDirectionalNode&lt;Type&gt;*
- previousPointer : BiDirectionalNode&lt;Type&gt;*
--
Constructors
+ BiDirectionalNode&lt;Type&gt;() : constructor
+ BiDirectionalNode&lt;Type&gt;(Type data) : constructor
 + BiDirectionalNode&lt;Type&gt;(Type data, BiDirectionalNode&lt;Type * next, BiDirectionalNod&lt;Type * previous) : constructor

Acessors
+ getNodeData() : Type
+ getNextPointer() : Node&lt;Type&gt;
+ getPreviousPointer() : Node&lt;Type&gt;
+ setNodeData(Type value) : void
+ setNextPointer(Node&lt;Type&gt; * next) : void 
+ setPreviousPointer(Node&lt;Type&gt; * previous) void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>889</x>
      <y>868</y>
      <w>217</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>290.0;60.0;70.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>231</x>
      <y>595</y>
      <w>252</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>Model :: DoublyLinkedList&lt;Type&gt;
--

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>476</x>
      <y>637</y>
      <w>434</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;490.0;10.0;490.0;110.0;600.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>350</x>
      <y>763</y>
      <w>21</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>252</x>
      <y>854</y>
      <w>217</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>SimpleClass</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>504</x>
      <y>854</y>
      <w>217</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>SimpleClass</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>126</x>
      <y>1092</y>
      <w>217</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>SimpleClass</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>91</x>
      <y>763</y>
      <w>280</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>380.0;10.0;380.0;80.0;10.0;80.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>350</x>
      <y>763</y>
      <w>273</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0;370.0;80.0;370.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>854</y>
      <w>217</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>SimpleClass</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>231</x>
      <y>763</y>
      <w>140</w>
      <h>343</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>180.0;10.0;180.0;80.0;10.0;80.0;10.0;470.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>602</x>
      <y>1204</y>
      <w>35</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>623</x>
      <y>1323</y>
      <w>469</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type(inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt;*
- lefChildPointer : BinarySearchTreeNode&lt;Type&gt;*
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt;*
--
+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt;*
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt;*
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt;*

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>868</x>
      <y>1078</y>
      <w>21</w>
      <h>259</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;350.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1127</x>
      <y>1358</y>
      <w>266</w>
      <h>238</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
--
*Information Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool
*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void
*Data Operations*
+ insert(Type) : void
+ contains(Type) : bool
+ rem</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>1596</y>
      <w>469</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Model ::BinarySearchTree&lt;Type&gt;
--

- rootPointer : BinarySearchTreeNode&lt;Type&gt;*
- size : int (inherited)
- height : int (inherited)
- complete : bool (inherited)
- balanced : bool (inherited)
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt;*
+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void

- calculatedSize(BinarySearchTreeNode&lt;Type&gt; *) : int

- inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>623</x>
      <y>1547</y>
      <w>518</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>720.0;10.0;330.0;10.0;330.0;70.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1057</x>
      <y>196</y>
      <w>315</w>
      <h>203</h>
    </coordinates>
    <panel_attributes>Model :: Graph
--
-MAXIMUM : static const int
-vertexCount : int
-graphData[MAXIMUM] : Type
-adjacentMatrix[MAXIMUM][MAXIMUM] : bool
--
+Graph()
+~Graph()
--
- depthFirstTraversal
	(Graph&lt;Type&gt; graph, int vertex, bool markedVertices[]): void
+addVertex(const Type&amp; value) : void
+ addEdge(int source, int target) : void
+ removeEdge(int source, int target) : void
+ operator[](int vertex) : Type&amp;
+ operator[](int vertex) const : Type
+ size() const : int
+ areConnected(int osurce, int target) const : bool
+ neighbors(int vertex) const : std::set&lt;int&gt;
+ depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex) : void</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
