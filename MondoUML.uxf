<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>440</x>
      <y>10</y>
      <w>80</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>SimpleClass
--
Data Members
--
Methods
Constructors</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>710</x>
      <y>5</y>
      <w>155</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime : clock_t

--
+ startTimer (): void
+ StopTimer() : void
+ resetTimer() : void
+ displayTimerInfo() : void
+ getExecutionTimeInMicroseconds(): long
+Timer() : construcctor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>240</x>
      <y>560</y>
      <w>185</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>IntNode
--
-nodeData : int
-nodePointer : IntNode *
--
+getNodeData() : int
+getNodePointer() : IntNode *
+setNodeData(int) : void
+setNodePointer(IntNodePointer *) : void

+IntNode() : constructor
+IntNode(int : constructor
+IntNode(int, IntNode *) : constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>560</y>
      <w>170</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>
IntNodeArray
--
- head : IntNode* 
- size : int
--
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int index, int value) : void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>785</x>
      <y>340</y>
      <w>220</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
-nodeData : Type
-nodePointer : Node&gt;Type&gt;
--
Constructors
+Node&lt;Type&gt;() : constructor
+Node&lt;Type&gt;(Type value) : constructor
+Node&lt;Type&gt; (Type value, Node&lt;Type&gt; * next) : constructor

Accessors
+getNodeData() : Type
+getNodePointer() : Node&lt;Type&gt;()
+setNodeData(Type value) : void
+setNodePointer(Node&lt;Type&gt; * next) : void
bg=dark_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>815</x>
      <y>505</y>
      <w>245</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt;*
- Size : int
--
+ Array() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() const : int
+ getFront() const : Nose&lt;Type&gt;

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>835</x>
      <y>460</y>
      <w>45</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>70.0;90.0;70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1045</x>
      <y>325</y>
      <w>195</w>
      <h>155</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Nodde&lt;Type&gt; *
- end : Noce&lt;Type&gt;*
--
+ List&lt;Type&gt;(*) : cnstructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt;*
+ getEnd() const : Node&lt;Type&gt;*
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1000</x>
      <y>460</y>
      <w>55</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>90.0;40.0;30.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>175</y>
      <w>425</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Model :: BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type (inherited)
- nextPointer : BiDirectionalNode&lt;Type&gt;*
- previousPointer : BiDirectionalNode&lt;Type&gt;*
--
Constructors
+ BiDirectionalNode&lt;Type&gt;() : constructor
+ BiDirectionalNode&lt;Type&gt;(Type data) : constructor
 + BiDirectionalNode&lt;Type&gt;(Type data, BiDirectionalNode&lt;Type * next, BiDirectionalNod&lt;Type * previous) : constructor

Acessors
+ getNodeData() : Type
+ getNextPointer() : Node&lt;Type&gt;
+ getPreviousPointer() : Node&lt;Type&gt;
+ setNodeData(Type value) : void
+ setNextPointer(Node&lt;Type&gt; * next) : void 
+ setPreviousPointer(Node&lt;Type&gt; * previous) void
bg=dark_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>795</x>
      <y>310</y>
      <w>155</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>290.0;60.0;70.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>325</x>
      <y>115</y>
      <w>190</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Model :: DoublyLinkedList&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoublyLinkedList() : constructor
virtual ~DoublyLinkedList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ getFront() const: BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *
+ getSize() const : int
bg=cyan
+ setFront(BiDirectionalNode&lt;Type&gt; * front) : void
+ setEnd(BiDirectionalNode&lt;Type&gt; * end) : void
+ setSize(int size) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>145</y>
      <w>300</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;470.0;10.0;470.0;110.0;580.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>300</y>
      <w>155</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
- front : BiDirectioanlNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>525</x>
      <y>300</y>
      <w>155</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
- front : BiDirectioanlNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+peek() : Type


+ add(Type data) : void
+remove(int index) : Type
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>145</x>
      <y>115</y>
      <w>175</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Model :: DoublList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoubleList : constructor
+ ~DoubleList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addAtIndexFast(int index, Type value) : void
+ getFromIndex(int index) : Type
+ getFromIndexFast(int index) : Type
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>195</x>
      <y>605</y>
      <w>65</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0;90.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>605</x>
      <y>635</y>
      <w>335</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type(inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt;*
- lefChildPointer : BinarySearchTreeNode&lt;Type&gt;*
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt;*
--
+BinarySearchTreeNode() : constructor
+BinarySearchTreeNode(Type data) : constructor
+ ~BinarySearchTreeNode() : destructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt;*
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt;*
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt;*

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>780</x>
      <y>460</y>
      <w>15</w>
      <h>185</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;350.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>965</x>
      <y>660</y>
      <w>190</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
--
*Information Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool
*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void
*Data Operations*
+ insert(Type) : void
+ contains(Type) : bool
+ rem
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>610</x>
      <y>830</y>
      <w>330</w>
      <h>355</h>
    </coordinates>
    <panel_attributes>Model ::BinarySearchTree&lt;Type&gt;
--
# root : BinarySearchTreeNode
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt;*
+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void

*Recursive Helper Methods*
# calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
# calculateHeight(BinarySearchTreeNode&lt;Type&gt; *) : int
# isComplete(BinarySearchTreeNode&lt;Type&gt; *, int index, int size) : bool
# isBalanced(BinarySearchTreeNode&lt;Type&gt; *) : bool

#removeNode(BinarySearchTreeNode &lt;Type&gt; *) : void

# inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void 

#GetLeftMostChild(BinarySearchTreeNode&lt;Type&gt; *) : BinarySearchTreeNode&lt;Type&gt; *
# getRightMostChild(BinarySearchTreeNode&lt;Type&gt; *) : BinarySearchTreeNode&lt;Type&gt; *

*Informational*
+ getSize() : int
+ getHeight() : int
+ isBalanced() : bool
+ isComplete() : bool

*Traversal*
- inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void 

*Data Operations* 
+ insert(Type) : void
+ conatains(Type) : bool
+ remove(Type) : void
+ findMinimum() : Type
+ findMaximum() : Type

*Demo Only*
+ demoTraversalSteps(BinarySearchTreeNode&lt;Type&gt; *) : void

bg=green





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>605</x>
      <y>795</y>
      <w>370</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>720.0;10.0;330.0;10.0;330.0;70.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>895</x>
      <y>0</y>
      <w>225</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Model :: Graph
--
-MAXIMUM : static const int
-vertexCount : int
-graphData[MAXIMUM] : Type
-adjacentMatrix[MAXIMUM][MAXIMUM] : bool
--
+Graph()
+~Graph()
--
- depthFirstTraversal
	(Graph&lt;Type&gt; graph, int vertex, bool markedVertices[]): void
+addVertex(const Type&amp; value) : void
+ addEdge(int source, int target) : void
+ removeEdge(int source, int target) : void
+ operator[](int vertex) : Type&amp;
+ operator[](int vertex) const : Type
+ size() const : int
+ areConnected(int osurce, int target) const : bool
+ neighbors(int vertex) const : std::set&lt;int&gt;
+ depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex) : void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>300</y>
      <w>155</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>Model :: CircularList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList

+ add(Type data) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type

- findNode(int inde) : BiDirectionalNode
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>235</x>
      <y>250</y>
      <w>380</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>370.0;10.0;370.0;60.0;740.0;60.0;740.0;100.0;740.0;60.0;310.0;60.0;310.0;100.0;310.0;60.0;10.0;60.0;10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>0</x>
      <y>530</y>
      <w>500</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>Simple Data Structure
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>215</x>
      <y>825</y>
      <w>325</w>
      <h>195</h>
    </coordinates>
    <panel_attributes>Model :: AVLTree&lt;Type&gt;
--
# root : BinarySearchTreeNode&lt;Type&gt; * (inherited)
--

+ AVLTree() : constructor
+ ~AVLTree() : destructor

*AVL Rotations*
- leftRotation(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt; *
- rightRotation(BinarySearchTreeNode&lt;Type&gt; * first) : BinarySearchTreeNode&lt;Type&gt; *
- leftRightRotation(BinarySearchTreeNode&lt;Type&gt; * first) : BinarySearchTreeNode&lt;Type&gt; *
- rightLeftRotation(BinarySearchTreeNode&lt;Type&gt; * first) : BinarySearchTreeNode&lt;Type&gt; *

*Helper Methods*
- insertNode(BinarySearchTreeNode&lt;Type&gt; * , Type value) : BinarySearchTreeNode&lt;Type&gt; *
- removeNode(BinarySearchTreeNode&lt;Type&gt; * , Type value) : BinarySearchTreeNode&lt;Type&gt; *
- balancedSubTree(BinarySearchTreeNode&lt;Type&gt; *) : BinarySearchTreeNode&lt;Type&gt; *
- heightDifference(BinarySearchTreeNode&lt;Type&gt; * prent) : int

*Data Operations*
+insert(Type) : void
+ remove(Type) : void
bg=green
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>535</x>
      <y>880</y>
      <w>85</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>150.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>990</x>
      <y>860</y>
      <w>170</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>HashNode&lt;Type&gt;
--
- nodeData : Type
- key : int
--
+ HashNode() : constructor
+ HashNode(Type data) : constructor

+ getKey() : int 
+ getNodeData() : Type
+ setNodeData(Type data) : void
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1240</x>
      <y>830</y>
      <w>260</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Model :: HashTable&lt;Type&gt;
--
- capacit : int
- size : int
- effeciencyPercentage : double
- tableStorage : [HashNode&lt;Type&gt;*]
--
+ HashTable : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor
+ operator = (const Array&lt;Type&gt; &amp; toBeAssigned) : Array&lt;Type&gt;&amp;
+ getSize() const : int
+ getFont() const : Node&lt;Type&gt; *

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1155</x>
      <y>895</y>
      <w>95</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>170.0;10.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
